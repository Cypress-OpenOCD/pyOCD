"""
 mbed CMSIS-DAP debugger
 Copyright (c) 2006-2013 ARM Limited

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
import logging
from time import (time, sleep)

from ..core import exceptions
from ..core.coresight_target import CoreSightTarget
from ..core.memory_map import (FlashRegion, RamRegion, RomRegion, MemoryMap)
from ..core.target import Target
from ..coresight.cortex_m import CortexM
from ..utility.notification import Notification

flash_algo_main = {
    'load_address' : 0x08000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
    0x20004603, 0x46014770, 0x47702000, 0x2400b510, 0xf922f000, 0x46204604, 0xb570bd10, 0x25004604,
    0xf0004620, 0x4605f920, 0xbd704628, 0x4606b5f8, 0x4615460c, 0x46222700, 0x46304629, 0xf9a6f000,
    0x46384607, 0xb5f8bdf8, 0x460d4604, 0x27004616, 0x46294632, 0xf0004620, 0x4607f964, 0xbdf84638,
    0x47706001, 0x600a6802, 0x21004770, 0x1c49e000, 0x43424ad6, 0xd8fa428a, 0xb5084770, 0x48d44669,
    0xfff0f7ff, 0x0209210f, 0x40089800, 0xd1012800, 0xe0002001, 0x46032000, 0xbd084618, 0x4605b5fe,
    0x4616460b, 0x90022000, 0x27002400, 0x49c90168, 0x90001840, 0xa901bf00, 0x30109800, 0xffd2f7ff,
    0x0fc79801, 0xd0012b00, 0xd1032f00, 0xd1032b00, 0xd1012f00, 0xe0002001, 0x46042000, 0xd1092c00,
    0x42b09802, 0xe007d900, 0xf7ff2001, 0x9802ffbe, 0x90021c40, 0xd0de2c00, 0x4620bf00, 0x40482101,
    0xb5f8bdfe, 0x460d4604, 0x23002600, 0x49b10160, 0xbf001847, 0x46384669, 0xffa4f7ff, 0x0fc39800,
    0xd1062b00, 0xd90042ae, 0x2001e005, 0xff9df7ff, 0x2b001c76, 0xbf00d0ee, 0x21014618, 0xbdf84048,
    0x4607b5f0, 0x4613460d, 0x24002600, 0x4619bf00, 0xf7ff4638, 0x6818ff87, 0x07000f00, 0x07492105,
    0xd1014288, 0xe0002001, 0x46042000, 0xd1062c00, 0xd90042ae, 0x2001e005, 0xff77f7ff, 0x2c001c76,
    0xbf00d0e5, 0x21014620, 0xbdf04048, 0xb082b5f3, 0x27004606, 0x44784890, 0x07f09001, 0x21010fc0,
    0x90004048, 0xf7ff2500, 0x2800ff68, 0x2400d002, 0xe0024d88, 0x4d872401, 0x21ff3520, 0x462031f5,
    0xff9ff7ff, 0x2f004607, 0x9800d136, 0xd0052800, 0x300c4628, 0xf7ff9901, 0xe004ff43, 0x46284631,
    0xf7ff300c, 0x4620ff3d, 0x22013010, 0x46114082, 0xf7ff487a, 0x2101ff35, 0x30084628, 0xff30f7ff,
    0x32f522ff, 0x46202100, 0xff48f7ff, 0x2f004607, 0x9800d112, 0xd0072800, 0x31f521ff, 0x98019a03,
    0xff8ef7ff, 0xe0074607, 0x31f521ff, 0x300c4628, 0xf7ff9a03, 0x4607ff85, 0xb0044638, 0xb518bdf0,
    0x447c4c65, 0x49663cac, 0xf7ff4620, 0x4669ff09, 0xf7ff4863, 0xbd18ff9b, 0x2400b510, 0xffeff7ff,
    0x46204604, 0xb538bd10, 0x4d5b4604, 0x3dd6447d, 0x4628495c, 0xfef4f7ff, 0x1d284621, 0xfef0f7ff,
    0x48584669, 0xff82f7ff, 0xb570bd38, 0x460c4606, 0xe00a2500, 0xf7ff4630, 0x4605ffe6, 0xd0002d00,
    0x36ffe005, 0x360236ff, 0x2c001e64, 0xbf00d1f2, 0xbd704628, 0x4605b5f8, 0x4617460e, 0x447c4c4a,
    0x4620494a, 0xfeccf7ff, 0x310721ff, 0xf7ff1d20, 0x4629fec7, 0x30084620, 0xfec2f7ff, 0x46204631,
    0xf7ff300c, 0x4669febd, 0xf7ff4840, 0xbdf8ff4f, 0xb0ffb570, 0x4605b081, 0x24002600, 0x2000e003,
    0x55084669, 0x20011c64, 0x42840240, 0x4602d3f7, 0x46284669, 0xffcef7ff, 0x46304606, 0xb001b07f,
    0xb570bd70, 0x460c4603, 0x2100461d, 0x5c50e005, 0x42b05c6e, 0xe002d000, 0x42a11c49, 0xbf00d3f7,
    0xbd701858, 0x4604b538, 0x447d4d27, 0x49283d8c, 0xf7ff4628, 0x4621fe85, 0xf7ff1d28, 0x4669fe81,
    0xf7ff4823, 0xbd38ff13, 0x4604b538, 0x447d4d1e, 0x491f3db0, 0xf7ff4628, 0x4621fe73, 0xf7ff1d28,
    0x4669fe6f, 0xf7ff481a, 0xbd38ff01, 0x4605b5f8, 0x4617460e, 0x447c4c14, 0x49163cd8, 0xf7ff4620,
    0x21fffe5f, 0x1d203107, 0xfe5af7ff, 0x46204629, 0xf7ff3008, 0x4631fe55, 0x300c4620, 0xfe50f7ff,
    0x480c4669, 0xfee2f7ff, 0x0000bdf8, 0x00000d05, 0x40210400, 0x40230000, 0x0000025e, 0x40231008,
    0x0a000100, 0x1c000100, 0x00000136, 0x05000100, 0x14000100, 0x06000100, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x08000021,
    'pc_unInit': 0x08000027,
    'pc_program_page': 0x0800004d,
    'pc_erase_sector': 0x0800003b,
    'pc_eraseAll': 0x0800002d,

    'static_base' : 0x08000000 + 0x00000020 + 0x00000a0c,
    'begin_stack' : 0x08000d00,
    'begin_data' : 0x08000000 + 0x1000,
    'page_size' : 0x200,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    'page_buffers' : [0x08001000, 0x08001200],   # Enable double buffering
    'min_program_length' : 0x200,

    # Flash information
    'flash_start': 0x10000000,
    'flash_size': 0x100000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}

flash_algo_work = {
    'load_address' : 0x08000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
    0x20004603, 0x46014770, 0x47702000, 0x2400b510, 0xf93cf000, 0x46204604, 0xb570bd10, 0x25004604,
    0xf0004620, 0x4605f90c, 0xbd704628, 0x4606b5f8, 0x4615460c, 0x46222700, 0x46304629, 0xf9a9f000,
    0x46384607, 0xb5f8bdf8, 0x460d4604, 0x27004616, 0x46294632, 0xf0004620, 0x4607f95a, 0xbdf84638,
    0x47706001, 0x600a6802, 0x21004770, 0x1c49e000, 0x43424ad7, 0xd8fa428a, 0xb5084770, 0x48d54669,
    0xfff0f7ff, 0x0209210f, 0x40089800, 0xd1012800, 0xe0002001, 0x46032000, 0xbd084618, 0x4605b5fe,
    0x4616460b, 0x90022000, 0x27002400, 0x49ca0168, 0x90001840, 0xa901bf00, 0x30109800, 0xffd2f7ff,
    0x0fc79801, 0xd0012b00, 0xd1032f00, 0xd1032b00, 0xd1012f00, 0xe0002001, 0x46042000, 0xd1092c00,
    0x42b09802, 0xe007d900, 0xf7ff2001, 0x9802ffbe, 0x90021c40, 0xd0de2c00, 0x4620bf00, 0x40482101,
    0xb5f8bdfe, 0x460d4604, 0x23002600, 0x49b20160, 0xbf001847, 0x46384669, 0xffa4f7ff, 0x0fc39800,
    0xd1062b00, 0xd90042ae, 0x2001e005, 0xff9df7ff, 0x2b001c76, 0xbf00d0ee, 0x21014618, 0xbdf84048,
    0x4607b5f0, 0x4613460d, 0x24002600, 0x4619bf00, 0xf7ff4638, 0x6818ff87, 0x07000f00, 0x07492105,
    0xd1014288, 0xe0002001, 0x46042000, 0xd1062c00, 0xd90042ae, 0x2001e005, 0xff77f7ff, 0x2c001c76,
    0xbf00d0e5, 0x21014620, 0xbdf04048, 0xb082b5f3, 0x27004606, 0x44784891, 0x07f09001, 0x21010fc0,
    0x90004048, 0xf7ff2500, 0x2800ff68, 0x2400d002, 0xe0024d89, 0x4d882401, 0x21ff3520, 0x462031f5,
    0xff9ff7ff, 0x2f004607, 0x9800d136, 0xd0052800, 0x300c4628, 0xf7ff9901, 0xe004ff43, 0x46284631,
    0xf7ff300c, 0x4620ff3d, 0x22013010, 0x46114082, 0xf7ff487b, 0x2101ff35, 0x30084628, 0xff30f7ff,
    0x32f522ff, 0x46202100, 0xff48f7ff, 0x2f004607, 0x9800d112, 0xd0072800, 0x31f521ff, 0x98019a03,
    0xff8ef7ff, 0xe0074607, 0x31f521ff, 0x300c4628, 0xf7ff9a03, 0x4607ff85, 0xb0044638, 0xb538bdf0,
    0x4d664604, 0x3dae447d, 0x46284966, 0xff08f7ff, 0x1d284621, 0xff04f7ff, 0x48624669, 0xff96f7ff,
    0xb570bd38, 0x460c4606, 0xe00a2500, 0xf7ff4630, 0x4605ffe6, 0xd0002d00, 0x36ffe005, 0x360236ff,
    0x2c001e64, 0xbf00d1f2, 0xbd704628, 0x2400b510, 0x20052140, 0xf7ff0680, 0x4604ffe4, 0xbd104620,
    0x4605b5f8, 0x4617460e, 0x447c4c4f, 0x4620494f, 0xfed6f7ff, 0x310721ff, 0xf7ff1d20, 0x4629fed1,
    0x30084620, 0xfeccf7ff, 0x46204631, 0xf7ff300c, 0x4669fec7, 0xf7ff4845, 0xbdf8ff59, 0xb0ffb570,
    0x4605b081, 0x24002600, 0x2000e003, 0x55084669, 0x20011c64, 0x42840240, 0x4602d3f7, 0x46284669,
    0xffcef7ff, 0x46304606, 0xb001b07f, 0xb570bd70, 0x460c4603, 0x2100461d, 0x5c50e005, 0x42b05c6e,
    0xe002d000, 0x42a11c49, 0xbf00d3f7, 0xbd701858, 0x4c2db518, 0x3c8a447c, 0x4620492d, 0xfe90f7ff,
    0x482b4669, 0xff22f7ff, 0xb538bd18, 0x4d264604, 0x3da6447d, 0x46284927, 0xfe82f7ff, 0x1d284621,
    0xfe7ef7ff, 0x48234669, 0xff10f7ff, 0xb538bd38, 0x4d1d4604, 0x3dca447d, 0x4628491e, 0xfe70f7ff,
    0x1d284621, 0xfe6cf7ff, 0x481a4669, 0xfefef7ff, 0xb5f8bd38, 0x460e4605, 0x4c134617, 0x3cf2447c,
    0x46204915, 0xfe5cf7ff, 0x310721ff, 0xf7ff1d20, 0x4629fe57, 0x30084620, 0xfe52f7ff, 0x46204631,
    0xf7ff300c, 0x4669fe4d, 0xf7ff480b, 0xbdf8fedf, 0x00000d05, 0x40210400, 0x40230000, 0x00000262,
    0x40231008, 0x1c000100, 0x0000014e, 0x05000100, 0x0a000100, 0x14000100, 0x06000100, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x08000021,
    'pc_unInit': 0x08000027,
    'pc_program_page': 0x0800004d,
    'pc_erase_sector': 0x0800003b,
    'pc_eraseAll': 0x0800002d,

    'static_base' : 0x08000000 + 0x00000020 + 0x00000a10,
    'begin_stack' : 0x08000d00,
    'begin_data' : 0x08000000 + 0x1000,
    'page_size' : 0x200,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    'page_buffers' : [0x08001000, 0x08001200],   # Enable double buffering
    'min_program_length' : 0x200,

    # Flash information
    'flash_start': 0x14000000,
    'flash_size': 0x8000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}

flash_algo_sflash = {
    'load_address' : 0x08000000,

    # Flash algorithm as a hex string
    'instructions': [
    0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,
    0x20004603, 0x46014770, 0x47702000, 0x2400b510, 0xf962f000, 0x46204604, 0xb570bd10, 0x25004604,
    0xf0004620, 0x4605f92b, 0xbd704628, 0x4606b5f8, 0x4615460c, 0x46222700, 0x46304629, 0xf8fff000,
    0x46384607, 0xb5f8bdf8, 0x460d4604, 0x27004616, 0x46294632, 0xf0004620, 0x4607f963, 0xbdf84638,
    0x47706001, 0x600a6802, 0x21004770, 0x1c49e000, 0x43424ae4, 0xd8fa428a, 0xb5084770, 0x48e24669,
    0xfff0f7ff, 0x0209210f, 0x40089800, 0xd1012800, 0xe0002001, 0x46032000, 0xbd084618, 0x4605b5fe,
    0x4616460b, 0x90022000, 0x27002400, 0x49d70168, 0x90001840, 0xa901bf00, 0x30109800, 0xffd2f7ff,
    0x0fc79801, 0xd0012b00, 0xd1032f00, 0xd1032b00, 0xd1012f00, 0xe0002001, 0x46042000, 0xd1092c00,
    0x42b09802, 0xe007d900, 0xf7ff2001, 0x9802ffbe, 0x90021c40, 0xd0de2c00, 0x4620bf00, 0x40482101,
    0xb5f8bdfe, 0x460d4604, 0x23002600, 0x49bf0160, 0xbf001847, 0x46384669, 0xffa4f7ff, 0x0fc39800,
    0xd1062b00, 0xd90042ae, 0x2001e005, 0xff9df7ff, 0x2b001c76, 0xbf00d0ee, 0x21014618, 0xbdf84048,
    0x4607b5f0, 0x4613460d, 0x24002600, 0x4619bf00, 0xf7ff4638, 0x6818ff87, 0x07000f00, 0x07492105,
    0xd1014288, 0xe0002001, 0x46042000, 0xd1062c00, 0xd90042ae, 0x2001e005, 0xff77f7ff, 0x2c001c76,
    0xbf00d0e5, 0x21014620, 0xbdf04048, 0xb082b5f3, 0x27004606, 0x4478489e, 0x07f09001, 0x21010fc0,
    0x90004048, 0xf7ff2500, 0x2800ff68, 0x2400d002, 0xe0024d96, 0x4d952401, 0x21ff3520, 0x462031f5,
    0xff9ff7ff, 0x2f004607, 0x9800d136, 0xd0052800, 0x300c4628, 0xf7ff9901, 0xe004ff43, 0x46284631,
    0xf7ff300c, 0x4620ff3d, 0x22013010, 0x46114082, 0xf7ff4888, 0x2101ff35, 0x30084628, 0xff30f7ff,
    0x32f522ff, 0x46202100, 0xff48f7ff, 0x2f004607, 0x9800d112, 0xd0072800, 0x31f521ff, 0x98019a03,
    0xff8ef7ff, 0xe0074607, 0x31f521ff, 0x300c4628, 0xf7ff9a03, 0x4607ff85, 0xb0044638, 0xb5f8bdf0,
    0x460e4605, 0x4c724617, 0x3cb2447c, 0x46204972, 0xff06f7ff, 0x310721ff, 0xf7ff1d20, 0x4629ff01,
    0x30084620, 0xfefcf7ff, 0x46204631, 0xf7ff300c, 0x4669fef7, 0xf7ff4868, 0xbdf8ff89, 0xb0ffb570,
    0x4605b081, 0x24002600, 0x2000e003, 0x55084669, 0x20011c64, 0x42840240, 0x4602d3f7, 0x46284669,
    0xffcdf7ff, 0x46304606, 0xb001b07f, 0xb570bd70, 0x460c4606, 0xe00a2500, 0xf7ff4630, 0x4605ffdf,
    0xd0002d00, 0x36ffe005, 0x360236ff, 0x2c001e64, 0xbf00d1f2, 0xbd704628, 0x2400b510, 0x2104bf00,
    0xf7ff484e, 0x4604ffe4, 0xd0002c00, 0x2101e015, 0xf7ff484b, 0x4604ffdc, 0xd0002c00, 0x2106e00d,
    0xf7ff4848, 0x4604ffd4, 0xd0002c00, 0x2102e005, 0xf7ff4845, 0x4604ffcc, 0xbf00bf00, 0xbd104620,
    0x4603b570, 0x461d460c, 0xe0052100, 0x5c6e5c50, 0xd00042b0, 0x1c49e002, 0xd3f742a1, 0x1858bf00,
    0xb518bd70, 0x447c4c39, 0x46204939, 0xfe88f7ff, 0x48374669, 0xff1af7ff, 0xb538bd18, 0x4d334604,
    0x3d1a447d, 0x46284933, 0xfe7af7ff, 0x1d284621, 0xfe76f7ff, 0x482f4669, 0xff08f7ff, 0xb538bd38,
    0x4d2a4604, 0x3d3e447d, 0x4628492b, 0xfe68f7ff, 0x1d284621, 0xfe64f7ff, 0x48274669, 0xfef6f7ff,
    0xb538bd38, 0x4d214604, 0x3d62447d, 0x46284922, 0xfe56f7ff, 0x1d284621, 0xfe52f7ff, 0x481e4669,
    0xfee4f7ff, 0xb5f8bd38, 0x460e4605, 0x4c174617, 0x3c8a447c, 0x46204919, 0xfe42f7ff, 0x310721ff,
    0xf7ff1d20, 0x4629fe3d, 0x30084620, 0xfe38f7ff, 0x46204631, 0xf7ff300c, 0x4669fe33, 0xf7ff480f,
    0xbdf8fec5, 0x00000d05, 0x40210400, 0x40230000, 0x000002a6, 0x40231008, 0x05000100, 0x16000800,
    0x16001a00, 0x16005a00, 0x16007c00, 0x000000f6, 0x0a000100, 0x1c000100, 0x14000100, 0x06000100,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
    0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000
    ],

    # Relative function addresses
    'pc_init': 0x08000021,
    'pc_unInit': 0x08000027,
    'pc_program_page': 0x0800004d,
    'pc_erase_sector': 0x0800003b,
    'pc_eraseAll': 0x0800002d,

    'static_base' : 0x08000000 + 0x00000020 + 0x00000a54,
    'begin_stack' : 0x08000d00,
    'begin_data' : 0x08000000 + 0x1000,
    'page_size' : 0x200,
    'analyzer_supported' : False,
    'analyzer_address' : 0x00000000,
    'page_buffers' : [0x08001000, 0x08001200],   # Enable double buffering
    'min_program_length' : 0x200,

    # Flash information
    'flash_start': 0x16000000,
    'flash_size': 0x8000,
    'sector_sizes': (
        (0x0, 0x200),
    )
}

class CY8C6xx7(CoreSightTarget):
    memoryMap = MemoryMap(
        RomRegion(start=0x00000000, length=0x20000),
        FlashRegion(start=0x10000000, length=0x100000, blocksize=0x200, is_boot_memory=True, erased_byte_value=0, 
                    algo=flash_algo_main),
        FlashRegion(start=0x14000000, length=0x8000, blocksize=0x200, is_boot_memory=False, erased_byte_value=0, 
                    algo=flash_algo_work),
        # FlashRegion(start=0x16000000, length=0x8000, blocksize=0x200, is_boot_memory=False, erased_byte_value=0, 
        # algo=flash_algo_sflash),
        RamRegion(start=0x08000000, length=0x10000)
    )

    def __init__(self, link):
        super(CY8C6xx7, self).__init__(link, self.memoryMap)

    def create_init_sequence(self):
        seq = super(CY8C6xx7, self).create_init_sequence()
        seq.replace_task('create_cores', self.create_cy8c6xx7_core)
        return seq

    def create_cy8c6xx7_core(self):
        core0 = CortexM_CY8C6xx7(self, self.aps[1], self.memory_map, 0)
        core1 = CortexM_CY8C6xx7(self, self.aps[2], self.memory_map, 1)
        self.aps[1].core = core0
        self.aps[2].core = core1
        core0.init()
        core1.init()
        self.add_core(core0)
        self.add_core(core1)


class CortexM_CY8C6xx7(CortexM):

    def reset(self, software_reset=None):
        self.notify(Notification(event=Target.EVENT_PRE_RESET, source=self))

        if software_reset == None:
            software_reset = True

        self._run_token += 1
        if software_reset:
            try:
                self.write_memory(CortexM.NVIC_AIRCR, CortexM.NVIC_AIRCR_VECTKEY | CortexM.NVIC_AIRCR_SYSRESETREQ)
                self.flush()
            except exceptions.TransferError:
                pass
        else:
            self.session.probe.reset()

        start_time = time()
        while time() - start_time < 5.0:
            try:
                dhcsr_reg = self.read32(CortexM.DHCSR)
                if (dhcsr_reg & CortexM.S_RESET_ST) == 0:
                    break
            except exceptions.TransferError:
                self.flush()
                self._ap.dp.init()
                self._ap.dp.power_up_debug()
                sleep(0.01)

        self.notify(Notification(event=Target.EVENT_POST_RESET, source=self))

    def wait_halted(self):
        start_time = time()
        while time() - start_time < 5.0:
            try:
                if not self.is_running():
                    return
            except exceptions.TransferError:
                self.flush()
                sleep(0.01)

        raise Exception("Timeout waiting for target halt")

    def reset_stop_on_reset(self, software_reset=None):
        self.halt()        
        self.reset(software_reset)
        sleep(0.2)
        self.halt()

        self.wait_halted()

        if self.core_number == 0:
            vtbase = self.read_memory(0x402102B0)  # VTBASE_CM0
        elif self.core_number == 1:
            vtbase = self.read_memory(0x402102C0)  # VTBASE_CM4
        else:
            raise Exception("Invalid CORE ID")

        vtbase &= 0xFFFFFF00
        if vtbase < 0x10000000 or vtbase > 0x18000000:
            logging.warning("Vector Table address invalid (0x%08X), will not halt at main()", vtbase)
            return

        entry = self.read_memory(vtbase + 4)
        if entry < 0x10000000 or entry > 0x18000000:
            logging.warning("Entry Point address invalid (0x%08X), will not halt at main()", entry)
            return

        self.set_breakpoint(entry)
        self.reset(True)
        sleep(0.2)
        self.wait_halted()
        self.remove_breakpoint(entry)
